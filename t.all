
(fn (assert expr val test-name)
    (let (pass "pass ")
        (let (fail "fail ")
            (let (c (== expr val))
                (if c
                    (drop fail (concat pass test-name))
                    (drop pass (concat fail test-name)))))))

(fn (min a b)
    (let (aa (clone a))
         (let (bb (clone b))
              (split (a1 a2 aa)
                     (split (b1 b2 bb)
                            (let (cmp (> a1 b1))
                                 (if cmp
                                     (drop a2 b2)
                                     (drop b2 a2))))))))

(let (test-name "min")
    (let (a 10)
         (let (b 20)
            (let (answer (min a b))
                (let (correct 10)
                    (assert answer correct test-name))))))

(fn (max a b)
    (let (aa (clone a))
         (let (bb (clone b))
              (split (a1 a2 aa)
                     (split (b1 b2 bb)
                            (let (cmp (< a1 b1))
                                 (if cmp
                                     (drop a2 b2)
                                     (drop b2 a2))))))))

(let (test-name "max")
    (let (a 10)
         (let (b 20)
            (let (answer (max a b))
                (let (correct 20)
                    (assert answer correct test-name))))))

(fn (id a)
    a)

(let (test-name "id")
    (let (a 14)
        (let (aa (clone a))
            (split (al ar aa)
                (assert al ar test-name)))))

(fn (car cell)
    (split (l r cell)
        (drop r l)))

(let (test-name "car")
    (let (a 14)
        (let (aa (clone a))
            (split (al ar aa)
                (let (wrong 15)
                    (let (cell (cons ar wrong))
                        (let (answer (car cell))
                            (assert answer al test-name))))))))

(fn (cdr cell)
    (split (l r cell)
        (drop l r)))

(let (test-name "cdr")
    (let (a 14)
        (let (aa (clone a))
            (split (al ar aa)
                (let (wrong 15)
                    (let (cell (cons wrong ar))
                        (let (answer (cdr cell))
                            (assert answer al test-name))))))))

(fn (add-one-to-each cell)
    (split (l r cell)
        (let (one1 1)
            (let (one2 1)
                (let (ll (+ l one1))
                     (let (rr (+ r one2))
                          (cons ll rr)))))))

(let (test-name "add-one-to-each")
    (let (a 1)
        (let (expected-a 2)
            (let (b 2)
                (let (expected-b 3)
                    (let (cell (cons a b))
                        (let (expected-answer (cons expected-a expected-b))
                            (let (answer (add-one-to-each cell))
                                (assert answer expected-answer test-name)))))))))

